let take_list ~num list =
  let rec take_list' count rest accum =
    if count = 0 then List.rev accum
    else
      match rest with
      | [] -> List.rev accum
      | v :: rest -> take_list' (pred count) rest (v :: accum)
  in
  take_list' num list []

let split_on_char ~char ~str =
  let rec split str accum =
    if String.length str = 0 then List.rev accum
    else
      try
        let index = String.index str char in
        let splitted = String.sub str 0 index
        and rest =
          String.sub str (index + 1) (String.length str - index - 1)
        in
        split rest (splitted :: accum)
      with Not_found -> List.rev (str :: accum)
  in
  split str []

(* calculate factorial *)
let factorial n =
  let rec laddar' accum n =
    if n = 0 then accum
    else laddar' Big_int.(mult_int_big_int n accum) (pred n)
  in
  laddar' (Big_int.big_int_of_int 1) n

(* calculate combination as nCm *)
let combination n m =
  let n' = factorial n and m' = factorial m and nm' = factorial (n - m) in
  Big_int.(div_big_int n' (mult_big_int m' nm'))

let read_lines count ~f =
  let rec read_lines' current accum =
    if current >= count then List.rev accum
    else
      let line = read_line () |> f in
      read_lines' (succ current) (line :: accum)
  in
  read_lines' 0 []

let list_find_opt ~f l = try Some (List.find f l) with Not_found -> None

let string_of_list l =
  let str = Bytes.make (List.length l) ' ' in
  List.iteri (fun i c -> Bytes.set str i c) l ;
  Bytes.to_string str

let list_of_string s =
  Array.init (String.length s) (fun i -> s.[i]) |> Array.to_list

let string_of_list l = String.init (List.length l) (List.nth l)

let () =
  (* need implementation *)
  ()
